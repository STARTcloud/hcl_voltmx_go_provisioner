name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment for manual build (production or development). Used if a manual version is specified.'
        required: false
        type: choice
        default: production
        options:
          - development
          - production
      version:
        description: 'Version for manual build (e.g., 1.2.3). If provided, a manual release will be attempted.'
        required: false
        type: string
      caching:
        description: 'Use caching (currently placeholder for bundling steps).'
        required: false
        type: boolean
        default: false
      draft:
        description: 'Release as draft (for manual release, if version is specified).'
        required: false
        type: boolean
        default: true
      run_integration_tests:
        description: 'Run integration tests. (Typically true unless doing a quick manual version release).'
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  pull-requests: write
  issues: write # For label creation/management by Release Please

jobs:
  lint:
    name: Lint Project Files
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive' # Checkout submodules if they exist
          token: ${{ secrets.GH_PAT_SUBMODULES }} # For private submodules

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install linters
        run: |
          pip install yamllint ansible-lint ansible
          # sudo apt-get update && sudo apt-get install -y shellcheck # Uncomment if you add shell script linting

      - name: Lint YAML files
        run: |
          echo "Linting hcl_voltmx_go_provisioner/provisioner.yml"
          yamllint --config-file .yamllint ./hcl_voltmx_go_provisioner/provisioner.yml
          echo "Linting Ansible Jinja2 templates"
          yamllint --config-file .yamllint ./hcl_voltmx_go_provisioner/provisioners/ansible/templates/

      # Optional: Ruby Linting (RuboCop)
      # - name: Set up Ruby
      #   uses: ruby/setup-ruby@v1
      #   with:
      #     ruby-version: '3.x' # Specify your Ruby version
      # - name: Install RuboCop
      #   run: gem install rubocop
      # - name: Lint Ruby files
      #   run: rubocop hcl_voltmx_go_provisioner/core/**/*.rb

      # Optional: Shell Script Linting (ShellCheck)
      # - name: Lint Shell scripts
      #   run: |
      #     find ./hcl_voltmx_go_provisioner/scripts/ -name '*.sh' -print0 | xargs -0 shellcheck

      - name: Lint Ansible playbooks
        run: >
          ansible-lint --config-file ./hcl_voltmx_go_provisioner/provisioners/ansible/.ansible-lint
          ./hcl_voltmx_go_provisioner/provisioners/ansible/*.yml

  integration-test-placeholder:
    name: Integration Test (Placeholder)
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.run_integration_tests == 'true' && (github.event.inputs.version == null || github.event.inputs.version == ''))
    needs: [lint]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          token: ${{ secrets.GH_PAT_SUBMODULES }} # For private submodules

      - name: Simulate Provisioner Integration Test
        run: |
          echo "This job will eventually spin up a VM using the hcl_voltmx_go_provisioner."
          echo "For now, it's a placeholder and always passes."

  release-please-and-bundle:
    name: Create Release and Bundle Assets
    runs-on: ubuntu-latest
    needs: [integration-test-placeholder]
    if: |
      ( github.event_name == 'push' && github.ref == 'refs/heads/main' &&
        (needs.integration-test-placeholder.result == 'success' || needs.integration-test-placeholder.result == 'skipped')
      ) ||
      ( github.event_name == 'workflow_dispatch' && github.event.inputs.version != null && github.event.inputs.version != '' )
    env:
      APP_NAME: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.env == 'development' && 'hcl_voltmx_go_provisioner_development') || 'hcl_voltmx_go_provisioner' }}
      SUFFIX: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.env == 'development' && '-dev') || '' }}
      USE_CACHING: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.caching) || false }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for release-please
          submodules: 'recursive'
          token: ${{ secrets.GH_PAT_SUBMODULES }} # For private submodules

      - name: Run Release Please
        uses: googleapis/release-please-action@v4
        id: release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

      - name: Set Release Version Info
        id: version_info
        run: |
          if [[ "${{ steps.release.outputs.release_created }}" == "true" ]]; then
            echo "version_number=${{ steps.release.outputs.version }}" >> $GITHUB_OUTPUT
            echo "is_release_please_run=true" >> $GITHUB_OUTPUT
            echo "Setting version from Release Please: ${{ steps.release.outputs.version }}"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.version }}" != "" ]]; then
            echo "version_number=${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "is_release_please_run=false" >> $GITHUB_OUTPUT
            echo "Setting version from manual input: ${{ inputs.version }}"
          else
            echo "version_number=" >> $GITHUB_OUTPUT
            echo "is_release_please_run=false" >> $GITHUB_OUTPUT
            echo "No release version determined. No bundling or release will occur."
          fi
        shell: bash

      - name: Setup Bundling Environment
        if: steps.version_info.outputs.version_number != ''
        env:
          ORIGINAL_DIR_NAME: hcl_voltmx_go_provisioner
        run: |
          echo "Preparing to bundle version: ${{ steps.version_info.outputs.version_number }} for app: ${{ env.APP_NAME }}${{ env.SUFFIX }}"
          if [ "${{ env.APP_NAME }}" != "${{ env.ORIGINAL_DIR_NAME }}" ]; then
            echo "Renaming directory '${{ env.ORIGINAL_DIR_NAME }}' to '${{ env.APP_NAME }}' for bundling."
            mv ${{ env.ORIGINAL_DIR_NAME }} ${{ env.APP_NAME }}
            echo "TARGET_BUNDLE_DIR=${{ env.APP_NAME }}" >> $GITHUB_ENV
          else
            echo "Using directory '${{ env.ORIGINAL_DIR_NAME }}' as is for bundling (TARGET_BUNDLE_DIR=${{ env.ORIGINAL_DIR_NAME }})."
            echo "TARGET_BUNDLE_DIR=${{ env.ORIGINAL_DIR_NAME }}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: "Including Core Release"
        if: steps.version_info.outputs.version_number != ''
        uses: robinraju/release-downloader@v1.8
        with:
          repository: "STARTcloud/core_provisioner"
          latest: true
          fileName: "core_provisioner.zip"
          out-file-path: "${{ env.TARGET_BUNDLE_DIR }}/"
          extract: true

      - name: "Removing core_provisioner Archive"
        if: steps.version_info.outputs.version_number != ''
        uses: JesseTG/rm@v1.0.3
        with:
          path: "${{ env.TARGET_BUNDLE_DIR }}/core_provisioner.zip"

      - name: "Removing Original Roles Directory (if exists)"
        if: steps.version_info.outputs.version_number != ''
        uses: JesseTG/rm@v1.0.3
        with:
          path: "${{ env.TARGET_BUNDLE_DIR }}/provisioners/ansible/roles"

      - name: "Checking out STARTcloud/startcloud_roles"
        if: steps.version_info.outputs.version_number != ''
        uses: actions/checkout@v4
        with:
          repository: STARTcloud/startcloud_roles
          path: ${{ env.TARGET_BUNDLE_DIR }}/provisioners/ansible/temp_startcloud_roles

      - name: "Consolidating Roles"
        if: steps.version_info.outputs.version_number != ''
        run: |
          set -e
          ANSIBLE_DIR="${{ env.TARGET_BUNDLE_DIR }}/provisioners/ansible"
          FINAL_ROLES_DIR="$ANSIBLE_DIR/roles"
          TEMP_STARTCLOUD_ROLES_DIR="$ANSIBLE_DIR/temp_startcloud_roles"
          EXISTING_SWITCHBOARD_ROLES_DIR="$ANSIBLE_DIR/ansible_collections/startcloud/switchboard_roles/roles"

          echo "Target directory for consolidated roles: $FINAL_ROLES_DIR"
          mkdir -p "$FINAL_ROLES_DIR"
          
          # Move roles from the checked-out STARTcloud/startcloud_roles
          if [ -d "$TEMP_STARTCLOUD_ROLES_DIR" ] && [ "$(ls -A $TEMP_STARTCLOUD_ROLES_DIR)" ]; then
            echo "Moving roles from $TEMP_STARTCLOUD_ROLES_DIR"
            # Ensure only roles are moved, not .git or other top-level files from the checkout
            if [ -d "$TEMP_STARTCLOUD_ROLES_DIR/roles" ]; then
              mv $TEMP_STARTCLOUD_ROLES_DIR/roles/* "$FINAL_ROLES_DIR/"
            else
              # If roles are at the root of the checkout
              mv $TEMP_STARTCLOUD_ROLES_DIR/* "$FINAL_ROLES_DIR/"
            fi
          else
            echo "$TEMP_STARTCLOUD_ROLES_DIR is empty or does not exist, skipping move."
          fi

          # Copy roles from the existing switchboard_roles collection within the main repo
          if [ -d "$EXISTING_SWITCHBOARD_ROLES_DIR" ] && [ "$(ls -A $EXISTING_SWITCHBOARD_ROLES_DIR)" ]; then
            echo "Copying roles from $EXISTING_SWITCHBOARD_ROLES_DIR"
            cp -R $EXISTING_SWITCHBOARD_ROLES_DIR/* "$FINAL_ROLES_DIR/"
          else
            echo "$EXISTING_SWITCHBOARD_ROLES_DIR is empty or does not exist, skipping copy."
          fi
          
          echo "Cleaning up temporary role checkout directories"
          rm -rf "$TEMP_STARTCLOUD_ROLES_DIR"
          # Optionally, remove the ansible_collections/startcloud/switchboard_roles dir from the bundle if it's now redundant
          # For now, keeping it, as per original manual script's implicit behavior.
          # rm -rf "$ANSIBLE_DIR/ansible_collections/startcloud/switchboard_roles" 
          
          echo "Roles consolidated into $FINAL_ROLES_DIR."
        shell: bash

      - name: "Remove all .git related files from bundle"
        if: steps.version_info.outputs.version_number != ''
        run: |
          echo "Removing .git directories, .gitmodules, and .gitattributes from ${{ env.TARGET_BUNDLE_DIR }}"
          find ${{ env.TARGET_BUNDLE_DIR }} -type d -name ".git" -exec rm -rf {} \;
          find ${{ env.TARGET_BUNDLE_DIR }} -type f -name ".gitmodules" -exec rm -f {} \;
          find ${{ env.TARGET_BUNDLE_DIR }} -type f -name ".gitattributes" -exec rm -f {} \;
        shell: bash

      - name: Zipping Output
        if: steps.version_info.outputs.version_number != ''
        env:
          FINAL_ASSET_NAME: ${{ env.APP_NAME }}-${{ steps.version_info.outputs.version_number }}${{ env.SUFFIX }}.zip
        run: |
          echo "Zipping directory contents of '${{ env.TARGET_BUNDLE_DIR }}' into '${{ env.FINAL_ASSET_NAME }}'"
          # The structure should be that the zip contains the TARGET_BUNDLE_DIR as the root folder.
          # So we cd to the parent of TARGET_BUNDLE_DIR, or ensure zip command creates it.
          # `zip -r <zip_file_name> <directory_to_zip>`
          # This command, run from GITHUB_WORKSPACE, will put TARGET_BUNDLE_DIR as a root item in the zip.
          zip -r ${{ env.FINAL_ASSET_NAME }} ${{ env.TARGET_BUNDLE_DIR }}
          echo "Created zip file: ${{ env.FINAL_ASSET_NAME }}"
        shell: bash

      - name: Upload Release Asset (to Release Please Release)
        if: steps.version_info.outputs.is_release_please_run == 'true' && steps.release.outputs.release_created == 'true' && steps.version_info.outputs.version_number != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FINAL_ASSET_NAME: ${{ env.APP_NAME }}-${{ steps.version_info.outputs.version_number }}${{ env.SUFFIX }}.zip
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./${{ env.FINAL_ASSET_NAME }}
          asset_name: ${{ env.FINAL_ASSET_NAME }}
          asset_content_type: application/zip

      - name: Create GitHub Release (Manual Dispatch)
        if: steps.version_info.outputs.is_release_please_run == 'false' && steps.version_info.outputs.version_number != ''
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FINAL_ASSET_NAME: ${{ env.APP_NAME }}-${{ steps.version_info.outputs.version_number }}${{ env.SUFFIX }}.zip
          MANUAL_TAG: ${{ env.APP_NAME }}/v${{ steps.version_info.outputs.version_number }}${{ env.SUFFIX }}
          MANUAL_RELEASE_NAME: "${{ env.APP_NAME }}: v${{ steps.version_info.outputs.version_number }}"
        with:
          name: ${{ env.MANUAL_RELEASE_NAME }}
          tag_name: ${{ env.MANUAL_TAG }}
          target_commitish: ${{ github.sha }}
          body: |
            Manual ${{ inputs.env }} release of ${{ env.APP_NAME }}.
            Version: v${{ steps.version_info.outputs.version_number }}${{ env.SUFFIX }}
            Triggered by: ${{ github.actor }}
          draft: ${{ github.event_name == 'workflow_dispatch' && inputs.draft }}
          prerelease: ${{ github.event_name == 'workflow_dispatch' && inputs.env == 'development' }}
          files: |
            ./${{ env.FINAL_ASSET_NAME }}
          fail_on_unmatched_files: true
